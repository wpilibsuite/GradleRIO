plugins {
    id "com.gradle.plugin-publish" version "1.2.1"
    id 'java-gradle-plugin'
    id 'idea'
    id 'maven-publish'
    id 'java'
    id 'groovy'
}

repositories {
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    mavenLocal()
}

configurations {
    processstarterDownload
}

def processstarterToolVersion = "2026.0.0-alpha-1"

dependencies {

    api 'com.google.code.gson:gson:2.13.1'

    api 'edu.wpi.first:native-utils:2026.0.0'

    api 'de.undercouch:gradle-download-task:5.6.0'

    testImplementation('org.spockframework:spock-core:2.0-M4-groovy-3.0') {
        exclude group: 'org.codehaus.groovy'
    }
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.13.4")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testImplementation gradleTestKit()

    processstarterDownload "edu.wpi.first.tools:processstarter:$processstarterToolVersion:windowsx86-64@zip"
    processstarterDownload "edu.wpi.first.tools:processstarter:$processstarterToolVersion:linuxx86-64@zip"
    processstarterDownload "edu.wpi.first.tools:processstarter:$processstarterToolVersion:linuxarm32@zip"
    processstarterDownload "edu.wpi.first.tools:processstarter:$processstarterToolVersion:linuxarm64@zip"
    processstarterDownload "edu.wpi.first.tools:processstarter:$processstarterToolVersion:osxuniversal@zip"
    processstarterDownload "edu.wpi.first.tools:processstarter:$processstarterToolVersion:windowsarm64@zip"
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

base {
    archivesName = "GradleRIO"
}

java {
    sourceCompatibility = 17
    targetCompatibility = 17
}

allprojects {
    group = "edu.wpi.first"

    if (project.hasProperty('publishVersion')) {
        version = project.publishVersion
    }

    tasks.withType(Javadoc) {
        options.addBooleanOption('Xdoclint:all,-missing', true)
    }

    tasks.withType(JavaCompile) {
      options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
  }
}

gradlePlugin {
    website = 'https://github.com/wpilibsuite/GradleRIO'
    vcsUrl = 'https://github.com/wpilibsuite/GradleRIO'
    plugins {
        gradleRio {
            id = 'edu.wpi.first.GradleRIO'
            displayName = 'GradleRIO'
            implementationClass = 'edu.wpi.first.gradlerio.GradleRIOPlugin'
            description = 'Managing FRC projects, the Gradle way (2019+)'
            tags = ['frc', 'wpilib', 'gradlerio']
        }
    }
}

apply from: 'versionupdates.gradle'

def examplesFolder = file("$rootDir/testing")

tasks.register('PatchExamples') {
    doLast {
        String regex = "(id\\s*?[\\\"|\\']edu\\.wpi\\.first\\.GradleRIO[\\\"|\\'].*?version\\s*?[\\\"|\\'])(.+?)([\\\"|\\'])";

        examplesFolder.eachFile { File file ->
            if (file.isDirectory() && file.name != '_archived') {
                def buildGradleFile = new File(file, 'build.gradle')
                if (buildGradleFile.exists() && buildGradleFile.isFile()) {
                    def text = buildGradleFile.text
                    text = text.replaceAll(regex, "id \"edu.wpi.first.GradleRIO\" version \"${version}\"")
                    buildGradleFile.text = text
                }
            }
        }
    }
}

task zipExamples(dependsOn: PatchExamples)

examplesFolder.eachFile { File file ->
    if (file.isDirectory() && file.name != '_archived') {
        task "zipExample${file.name}"(type: Zip) {
            from(file) {
                archiveFileName = "${file.name}.zip"
                exclude 'build/'
                exclude '.gradle/'
            }

            zipExamples.dependsOn it
            it.dependsOn PatchExamples
        }
    }
}

jar.finalizedBy zipExamples

task processprocessstarterDownload {
    inputs.files configurations.processstarterDownload
    doLast {
        configurations.processstarterDownload.each { downloadedFile ->
            def destinationDir = file("${buildDir}/resources/main")
                // Unzip and copy files
                copy {
                    from(zipTree(downloadedFile)) {
                        include 'processstarter*'
                    }
                    into destinationDir
                }

                // Rename the extracted file to include the classifier
                destinationDir.eachFile { extractedFile ->

                    if (extractedFile.name.startsWith('processstarter') && !extractedFile.name.contains('-')) {
                        def destinationFile = file("${buildDir}/resources/main/processstarter")
                        if (downloadedFile.name.contains("linuxarm32")) {
                            destinationFile = file("${buildDir}/resources/main/processstarter-linuxarm32")
                        } else if (downloadedFile.name.contains("linuxarm64")) {
                            destinationFile = file("${buildDir}/resources/main/processstarter-linuxarm64")
                        } else if (downloadedFile.name.contains("linuxx86-64")) {
                            destinationFile = file("${buildDir}/resources/main/processstarter-linuxx86-64")
                        } else if (downloadedFile.name.contains("osxuniversal")) {
                            destinationFile = file("${buildDir}/resources/main/processstarter-osxuniversal")
                        } else if (downloadedFile.name.contains("windowsx86-64")) {
                            destinationFile = file("${buildDir}/resources/main/processstarter-windowsx86-64.exe")
                        } else if (downloadedFile.name.contains("windowsarm64")) {
                            destinationFile = file("${buildDir}/resources/main/processstarter-windowsarm64.exe")
                        }
                        extractedFile.renameTo(destinationFile)
                    }
                }
        }
    }
}

jar.dependsOn processprocessstarterDownload

wrapper {
    gradleVersion = '8.11'
    distributionType = Wrapper.DistributionType.BIN
}
