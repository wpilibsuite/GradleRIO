import edu.wpi.first.gradlerio.deploy.roborio.RoboRIO

plugins {
    id "cpp"
    id "google-test-test-suite"
    id "edu.wpi.first.GradleRIO" version "2022.1.1-alpha-1"
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(RoboRIO) {
            team = project.frc.getTeamNumber()
            debug = true // TODO make this automated

            frcNativeArtifact('frcCpp') {
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcCpp

// Set this to true to include the src folder in the include directories passed
// to the compiler. Some eclipse project imports depend on this behavior.
// We recommend leaving this disabled if possible. Note for eclipse project
// imports this is enabled by default. For new projects, its disabled
def includeSrcInIncludeRoot = false

// dependencies {
//     // In C++ for now, the argument must be true
//     simulation wpi.deps.sim.gui(wpi.platforms.desktop, true)
//     simulation wpi.deps.sim.driverstation(wpi.platforms.desktop, true)

//     // Websocket extensions require additional configuration.
//     // simulation wpi.deps.sim.ws_server(wpi.platforms.desktop, true)
//     // simulation wpi.deps.sim.ws_client(wpi.platforms.desktop, true)
// }

// // Simulation configuration (e.g. environment variables).
// sim {
//     // Sets the websocket client remote host.
//     // envVar "HALSIMWS_HOST", "10.0.0.2"
// }

wpi.cpp.debugSimulation = false

wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

model {
    components {
        frcUserProgram(NativeExecutableSpec) {
            targetPlatform wpi.platforms.roborio
            targetPlatform wpi.platforms.desktop

            sources.cpp {
                source {
                    srcDir 'src/main/cpp'
                }
                exportedHeaders {
                    srcDir 'src/main/include'
                    if (includeSrcInIncludeRoot) {
                        srcDir 'src/main/cpp'
                    }
                }
            }

            deployArtifact.component = it
            wpi.cpp.enableExternalTasks(it)

            wpi.sim.enable(it)
            // Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
            wpi.cpp.vendor.cpp(it)
            wpi.cpp.deps.wpilib(it)
        }
    }
    testSuites {
        frcUserProgramTest(GoogleTestTestSuiteSpec) {
            testing $.components.frcUserProgram

            sources.cpp {
                source {
                    srcDir 'src/test/cpp'
                    include '**/*.cpp'
                }
            }

            wpi.cpp.enableExternalTasks(it)

            wpi.cpp.vendor.cpp(it)
            wpi.cpp.deps.wpilib(it)
            wpi.cpp.deps.googleTest(it)
        }
    }
}

wrapper {
    gradleVersion = '7.1.1'
    distributionType = Wrapper.DistributionType.BIN
}
